pipeline {
    agent {
        docker {
            image 'docker:latest'
        }
    }

    environment {
        IMAGE_ID = 'your-docker-image-id' // Replace with your Docker image ID
    }

    stages {
        stage('Clone Extract Script') {
            steps {
                echo 'Cloning script to extract Dockerfile...'
                sh '''
                # Clone the repository containing the script or define it inline
                cat << 'EOF' > extract_dockerfile.sh
                #!/bin/bash
                IMAGE=$1
                if [ -z "$IMAGE" ]; then
                    echo "Usage: $0 <image-id>"
                    exit 1
                fi

                docker history --no-trunc $IMAGE | awk 'NR>1 {print $NF}' | while read LINE; do
                    if [[ "$LINE" == *"#(nop)"* ]]; then
                        echo "${LINE#*#(nop) }"
                    else
                        echo "RUN $LINE"
                    fi
                done
                EOF
                chmod +x extract_dockerfile.sh
                '''
            }
        }

        stage('Pull Docker Image') {
            steps {
                echo "Pulling Docker image with ID: ${IMAGE_ID}..."
                sh '''
                docker pull ${IMAGE_ID}
                '''
            }
        }

        stage('Extract Dockerfile') {
            steps {
                echo 'Extracting Dockerfile...'
                sh '''
                ./extract_dockerfile.sh ${IMAGE_ID} > Dockerfile_extracted
                '''
            }
        }

        stage('Archive Dockerfile') {
            steps {
                echo 'Archiving extracted Dockerfile...'
                archiveArtifacts artifacts: 'Dockerfile_extracted', fingerprint: true
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully. Dockerfile has been extracted and archived.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
